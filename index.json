[
{
	"uri": "https://cornell-netlab.github.io/MicroP4/installation/",
	"title": "Installing μP4",
	"tags": [],
	"description": "",
	"content": "This webpage provides the instructions to build and install μP4 and reproduce the results from the paper \u0026ldquo;Composing Dataplane Programs with μP4\u0026rdquo;.\n As a pre-built VM. Building and installing μP4 from source.  Note: μP4 supports both v1model and Barefoot\u0026rsquo;s TNA architectures. For compiling programs for v1model, all the dependencies are publicly available. However, if you would like to compile programs for TNA, you would need access to Barefoot\u0026rsquo;s proprietary SDE (version 9.0.0). Accordingly, the pre-built VM has tools to support only the v1model. You would need to install Barefoot\u0026rsquo;s SDE yourself to support TNA.\nPre-built VM We provide a VM with μP4, along with all the dependencies, pre-installed here: TODO.\n Install and start Virtualbox on your machine. Download μP4 VM image, and import it to Virtualbox by selecting \u0026ldquo;File\u0026rdquo; -\u0026gt; \u0026ldquo;Import Appliance\u0026rdquo; in Virtualbox. Allocate the VM as much RAM as possible (at least 2GB). A single processor should suffice (recommended: 2). You may need to turn on virtualization extensions in your BIOS to enable 64-bit virtualization. When the VM starts up, the microp4 user should be automatically logged in. (username: microp4, password: microp4). Open a terminal and verify μP4 is installed To get the latest version of μP4, do cd microp4 \u0026amp;\u0026amp; git pull. To build it, follow the instructions at https://github.com/cornell-netlab/MicroP4#2-install.  Note: The VM does not include Barefoot\u0026rsquo;s SDE. You will need to install it yourself.\nFrom Source We have released the source code for μP4 at https://github.com/cornell-netlab/MicroP4/ under an open-source license.\nTo build and install μP4, follow the instructions at: https://github.com/cornell-netlab/MicroP4/tree/master#getting-started.\n"
},
{
	"uri": "https://cornell-netlab.github.io/MicroP4/usage/",
	"title": "Using μP4",
	"tags": [],
	"description": "",
	"content": "There are two steps in using μP4:\n Writing μP4 programs: See this page for instructions on writing new programs. Compiling μP4 programs: See this page for instructions on compiling μP4 programs with μP4C.   -- "
},
{
	"uri": "https://cornell-netlab.github.io/MicroP4/contributors/",
	"title": "Contributors",
	"tags": [],
	"description": "",
	"content": " Hardik Soni, Cornell University Myriana Rifai, Nokia-Bell Labs Praveen Kumar, Cornell University Ryan Doenges, Cornell University Nate Foster, Cornell University  "
},
{
	"uri": "https://cornell-netlab.github.io/MicroP4/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cornell-netlab.github.io/MicroP4/",
	"title": "Composing Dataplane Programs with μP4",
	"tags": [],
	"description": "A compiler to build dataplane of network devices using portable, modular and composable programs.",
	"content": "Dataplane languages like P4 enable flexible and efficient packet-processing using domain-specific primitives such as programmable parsers and match-action tables. Unfortunately, P4 programs tend to be monolithic and tightly coupled to the hardware architecture, which makes it hard to write programs in a portable and modular way—e.g., by composing reusable libraries of standard protocols\nTo address this challenge, we present the design and implementation of a novel framework (μP4) comprising a light-weight logical architecture that abstracts away from the structure of the underlying hardware pipelines and naturally supports powerful forms of program composition. Using examples, we show how μP4 enables modular programming. We present a prototype of the μP4 compiler that generates code for multiple lower-level architectures, including Barefoot’s Tofino Native Architecture.\nGoals   Portable  Programs written for one architecture, say PSA, should be easily reusable across other architectures, say v1model, without having to modify the source code. Following the “write-once, compile-anywhere” philosophy, programs should be loosely coupled to architectures and use general constructs that a compiler maps to architecture-specific constructs.      Modular  It should be possible to develop individual packet-processing functions in an independent manner agnostic of other dataplane functions. For example, one should be able to define Ethernet and IPv4 packet-processing functionality as separate module.      Composable  It should be easy to flexibly compose individual functions to construct larger dataplane programs. For example, imagine combining L2 Ethernet processing with IPv4, or any other L3 routing scheme (e.g., IPv6, MPLS etc.) with compatible interface and semantics, to obtain a modular router.     "
},
{
	"uri": "https://cornell-netlab.github.io/MicroP4/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
