[
{
	"uri": "https://cornell-netlab.github.io/MicroP4/usage/lib/",
	"title": "Compiling Libraries",
	"tags": [],
	"description": "",
	"content": "TODO: text "
},
{
	"uri": "https://cornell-netlab.github.io/MicroP4/installation/",
	"title": "Installing μP4",
	"tags": [],
	"description": "",
	"content": "it is an extenstion of P4-16 "
},
{
	"uri": "https://cornell-netlab.github.io/MicroP4/usage/",
	"title": "Compiling with μP4C",
	"tags": [],
	"description": "",
	"content": "two possible ways to compile Compiling Libraries   Generating P4-16    "
},
{
	"uri": "https://cornell-netlab.github.io/MicroP4/usage/obj/",
	"title": "Generating P4-16",
	"tags": [],
	"description": "",
	"content": "TODO: text "
},
{
	"uri": "https://cornell-netlab.github.io/MicroP4/contributors/",
	"title": "Contributors",
	"tags": [],
	"description": "",
	"content": "link to people "
},
{
	"uri": "https://cornell-netlab.github.io/MicroP4/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cornell-netlab.github.io/MicroP4/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cornell-netlab.github.io/MicroP4/",
	"title": "μP4",
	"tags": [],
	"description": "A compiler to build dataplane of network devices using Portable, Modular and Composable programs",
	"content": "TODO: for now Abstract as overview\nLanguages like P4 enable flexible and efficient packet-processing using domain-specific primitives such as programmable parsers and match-action tables. Unfortunately, P4 programs tend to be monolithic and tightly coupled to the hardware architecture, which makes it hard to write programs in a portable and modular way—e.g., by composing reusable libraries of standard protocols.\nTo address this challenge, we present the design and implementation of a novel framework (μP4) comprising a light-weight logical architecture that abstracts away from the structure of the underlying hardware pipelines and naturally supports powerful forms of program composition. Using examples, we show how μP4 enables modular programming. We present a prototype of the μP4 compiler that generates code for multiple lower-level architectures, including Barefoot’s Tofino Native Architecture (TNA). We evaluate the overheads induced by our compiler on realistic examples.\nFeatures   Modular  TODO: one sentence      Composable  TODO: one sentence      Portable  TODO: one sentence     "
}]
